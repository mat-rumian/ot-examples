<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenTelemetry.Exporter.OpenTelemetryProtocol</name>
    </assembly>
    <members>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.BaseOtlpGrpcExportClient`1">
            <summary>Base class for sending OTLP export request over gRPC.</summary>
            <typeparam name="TRequest">Type of export request.</typeparam>
        </member>
        <member name="M:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.BaseOtlpGrpcExportClient`1.SendExportRequest(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.BaseOtlpGrpcExportClient`1.Shutdown(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.BaseOtlpHttpExportClient`1">
            <summary>Base class for sending OTLP export request over HTTP.</summary>
            <typeparam name="TRequest">Type of export request.</typeparam>
        </member>
        <member name="M:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.BaseOtlpHttpExportClient`1.SendExportRequest(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.BaseOtlpHttpExportClient`1.Shutdown(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.IExportClient`1">
            <summary>Export client interface.</summary>
            <typeparam name="TRequest">Type of export request.</typeparam>
        </member>
        <member name="M:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.IExportClient`1.SendExportRequest(`0,System.Threading.CancellationToken)">
            <summary>
            Method for sending export request to the server.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>True if the request has been sent successfully, otherwise false.</returns>
        </member>
        <member name="M:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.IExportClient`1.Shutdown(System.Int32)">
            <summary>
            Method for shutting down the export client.
            </summary>
            <param name="timeoutMilliseconds">
            The number of milliseconds to wait, or <c>Timeout.Infinite</c> to
            wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> if shutdown succeeded; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.OtlpGrpcLogExportClient">
            <summary>Class for sending OTLP metrics export request over gRPC.</summary>
        </member>
        <member name="M:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.OtlpGrpcLogExportClient.SendExportRequest(Opentelemetry.Proto.Collector.Logs.V1.ExportLogsServiceRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.OtlpGrpcMetricsExportClient">
            <summary>Class for sending OTLP metrics export request over gRPC.</summary>
        </member>
        <member name="M:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.OtlpGrpcMetricsExportClient.SendExportRequest(Opentelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.OtlpGrpcTraceExportClient">
            <summary>Class for sending OTLP trace export request over gRPC.</summary>
        </member>
        <member name="M:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.OtlpGrpcTraceExportClient.SendExportRequest(Opentelemetry.Proto.Collector.Trace.V1.ExportTraceServiceRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.OtlpHttpMetricsExportClient">
            <summary>Class for sending OTLP metrics export request over HTTP.</summary>
        </member>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.OtlpHttpTraceExportClient">
            <summary>Class for sending OTLP trace export request over HTTP.</summary>
        </member>
        <member name="T:OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.TimestampHelpers">
            <summary>
            Helpers to convert .NET time related types to the timestamp used in OTLP.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Exporter.OtlpExporterOptions">
            <summary>
            OpenTelemetry Protocol (OTLP) exporter options.
            OTEL_EXPORTER_OTLP_ENDPOINT, OTEL_EXPORTER_OTLP_HEADERS, OTEL_EXPORTER_OTLP_TIMEOUT, OTEL_EXPORTER_OTLP_PROTOCOL
            environment variables are parsed during object construction.
            </summary>
            <remarks>
            The constructor throws <see cref="T:System.FormatException"/> if it fails to parse
            any of the supported environment variables.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpExporterOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Exporter.OtlpExporterOptions"/> class.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OtlpExporterOptions.Endpoint">
            <summary>
            Gets or sets the target to which the exporter is going to send telemetry.
            Must be a valid Uri with scheme (http or https) and host, and
            may contain a port and path. The default value is http://localhost:4317.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OtlpExporterOptions.Headers">
            <summary>
            Gets or sets optional headers for the connection. Refer to the <a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md#specifying-headers-via-environment-variables">
            specification</a> for information on the expected format for Headers.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OtlpExporterOptions.TimeoutMilliseconds">
            <summary>
            Gets or sets the max waiting time (in milliseconds) for the backend to process each batch. The default value is 10000.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OtlpExporterOptions.Protocol">
            <summary>
            Gets or sets the the OTLP transport protocol. Supported values: Grpc and HttpProtobuf.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OtlpExporterOptions.ExportProcessorType">
            <summary>
            Gets or sets the export processor type to be used with the OpenTelemetry Protocol Exporter. The default value is <see cref="F:OpenTelemetry.ExportProcessorType.Batch"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OtlpExporterOptions.BatchExportProcessorOptions">
            <summary>
            Gets or sets the BatchExportProcessor options. Ignored unless ExportProcessorType is Batch.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OtlpExporterOptions.MetricReaderType">
            <summary>
            Gets or sets the <see cref="P:OpenTelemetry.Exporter.OtlpExporterOptions.MetricReaderType" /> to use. Defaults to <c>MetricReaderType.Periodic</c>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OtlpExporterOptions.PeriodicExportingMetricReaderOptions">
            <summary>
            Gets or sets the <see cref="P:OpenTelemetry.Exporter.OtlpExporterOptions.PeriodicExportingMetricReaderOptions" /> options. Ignored unless <c>MetricReaderType</c> is <c>Periodic</c>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OtlpExporterOptions.AggregationTemporality">
            <summary>
            Gets or sets the AggregationTemporality used for Histogram
            and Sum metrics.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Exporter.OtlpExporterOptions.HttpClientFactory">
            <summary>
            Gets or sets the factory function called to create the <see
            cref="T:System.Net.Http.HttpClient"/> instance that will be used at runtime to
            transmit telemetry over HTTP. The returned instance will be reused
            for all export invocations.
            </summary>
            <remarks>
            Notes:
            <list type="bullet">
            <item>This is only invoked for the <see
            cref="F:OpenTelemetry.Exporter.OtlpExportProtocol.HttpProtobuf"/> protocol.</item>
            <item>The default behavior when using the <see
            cref="M:OpenTelemetry.Trace.OtlpTraceExporterHelperExtensions.AddOtlpExporter(OpenTelemetry.Trace.TracerProviderBuilder,System.Action{OpenTelemetry.Exporter.OtlpExporterOptions})"/> extension is if an <a
            href="https://docs.microsoft.com/dotnet/api/system.net.http.ihttpclientfactory">IHttpClientFactory</a>
            instance can be resolved through the application <see
            cref="T:System.IServiceProvider"/> then an <see cref="T:System.Net.Http.HttpClient"/> will be
            created through the factory with the name "OtlpTraceExporter"
            otherwise an <see cref="T:System.Net.Http.HttpClient"/> will be instantiated
            directly.</item>
            <item>The default behavior when using the <see
            cref="M:OpenTelemetry.Metrics.OtlpMetricExporterExtensions.AddOtlpExporter(OpenTelemetry.Metrics.MeterProviderBuilder,System.Action{OpenTelemetry.Exporter.OtlpExporterOptions})"/> extension is if an <a
            href="https://docs.microsoft.com/dotnet/api/system.net.http.ihttpclientfactory">IHttpClientFactory</a>
            instance can be resolved through the application <see
            cref="T:System.IServiceProvider"/> then an <see cref="T:System.Net.Http.HttpClient"/> will be
            created through the factory with the name "OtlpMetricExporter"
            otherwise an <see cref="T:System.Net.Http.HttpClient"/> will be instantiated
            directly.</item>
            </list>
            </remarks>
        </member>
        <member name="T:OpenTelemetry.Exporter.OtlpExportProtocol">
            <summary>
            Supported by OTLP exporter protocol types according to the specification https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Exporter.OtlpExportProtocol.Grpc">
            <summary>
            OTLP over gRPC (corresponds to 'grpc' Protocol configuration option). Used as default.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Exporter.OtlpExportProtocol.HttpProtobuf">
            <summary>
            OTLP over HTTP with protobuf payloads (corresponds to 'http/protobuf' Protocol configuration option).
            </summary>
        </member>
        <member name="T:OpenTelemetry.Exporter.OtlpLogExporter">
            <summary>
            Exporter consuming <see cref="T:OpenTelemetry.Logs.LogRecord"/> and exporting the data using
            the OpenTelemetry protocol (OTLP).
            </summary>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpLogExporter.#ctor(OpenTelemetry.Exporter.OtlpExporterOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Exporter.OtlpLogExporter"/> class.
            </summary>
            <param name="options">Configuration options for the exporter.</param>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpLogExporter.#ctor(OpenTelemetry.Exporter.OtlpExporterOptions,OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.IExportClient{Opentelemetry.Proto.Collector.Logs.V1.ExportLogsServiceRequest})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Exporter.OtlpLogExporter"/> class.
            </summary>
            <param name="options">Configuration options for the exporter.</param>
            <param name="exportClient">Client used for sending export request.</param>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpLogExporter.Export(OpenTelemetry.Batch{OpenTelemetry.Logs.LogRecord}@)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpLogExporter.OnShutdown(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:OpenTelemetry.Exporter.OtlpMetricExporter">
            <summary>
            Exporter consuming <see cref="T:OpenTelemetry.Metrics.Metric"/> and exporting the data using
            the OpenTelemetry protocol (OTLP).
            </summary>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpMetricExporter.#ctor(OpenTelemetry.Exporter.OtlpExporterOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Exporter.OtlpMetricExporter"/> class.
            </summary>
            <param name="options">Configuration options for the exporter.</param>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpMetricExporter.#ctor(OpenTelemetry.Exporter.OtlpExporterOptions,OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.IExportClient{Opentelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceRequest})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Exporter.OtlpMetricExporter"/> class.
            </summary>
            <param name="options">Configuration options for the export.</param>
            <param name="exportClient">Client used for sending export request.</param>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpMetricExporter.Export(OpenTelemetry.Batch{OpenTelemetry.Metrics.Metric}@)">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpMetricExporter.OnShutdown(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:OpenTelemetry.Exporter.OtlpTraceExporter">
            <summary>
            Exporter consuming <see cref="T:System.Diagnostics.Activity"/> and exporting the data using
            the OpenTelemetry protocol (OTLP).
            </summary>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpTraceExporter.#ctor(OpenTelemetry.Exporter.OtlpExporterOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Exporter.OtlpTraceExporter"/> class.
            </summary>
            <param name="options">Configuration options for the export.</param>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpTraceExporter.#ctor(OpenTelemetry.Exporter.OtlpExporterOptions,OpenTelemetry.Exporter.OpenTelemetryProtocol.Implementation.ExportClient.IExportClient{Opentelemetry.Proto.Collector.Trace.V1.ExportTraceServiceRequest})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Exporter.OtlpTraceExporter"/> class.
            </summary>
            <param name="options">Configuration options for the export.</param>
            <param name="exportClient">Client used for sending export request.</param>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpTraceExporter.Export(OpenTelemetry.Batch{System.Diagnostics.Activity}@)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Exporter.OtlpTraceExporter.OnShutdown(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:OpenTelemetry.Metrics.OtlpMetricExporterExtensions">
            <summary>
            Extension methods to simplify registering of the OpenTelemetry Protocol (OTLP) exporter.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Metrics.OtlpMetricExporterExtensions.AddOtlpExporter(OpenTelemetry.Metrics.MeterProviderBuilder,System.Action{OpenTelemetry.Exporter.OtlpExporterOptions})">
            <summary>
            Adds <see cref="T:OpenTelemetry.Exporter.OtlpMetricExporter"/> to the <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> builder to use.</param>
            <param name="configure">Exporter configuration options.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> to chain the calls.</returns>
        </member>
        <member name="T:OpenTelemetry.Trace.OtlpTraceExporterHelperExtensions">
            <summary>
            Extension methods to simplify registering of the OpenTelemetry Protocol (OTLP) exporter.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.OtlpTraceExporterHelperExtensions.AddOtlpExporter(OpenTelemetry.Trace.TracerProviderBuilder,System.Action{OpenTelemetry.Exporter.OtlpExporterOptions})">
            <summary>
            Adds OpenTelemetry Protocol (OTLP) exporter to the TracerProvider.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> builder to use.</param>
            <param name="configure">Exporter configuration options.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> to chain the calls.</returns>
        </member>
        <member name="T:OpenTelemetry.Trace.SemanticConventions">
            <summary>
            Constants for semantic attribute names outlined by the OpenTelemetry specifications.
            <see href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/README.md"/>.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Trace.SpanAttributeConstants">
            <summary>
            Defines well-known span attribute keys.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Trace.ActivityHelperExtensions">
            <summary>
            Extension methods on Activity.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.ActivityHelperExtensions.TryGetStatus(System.Diagnostics.Activity,OpenTelemetry.Trace.StatusCode@,System.String@)">
            <summary>
            Gets the status of activity execution.
            Activity class in .NET does not support 'Status'.
            This extension provides a workaround to retrieve Status from special tags with key name otel.status_code and otel.status_description.
            </summary>
            <param name="activity">Activity instance.</param>
            <param name="statusCode"><see cref="T:OpenTelemetry.Trace.StatusCode"/>.</param>
            <param name="statusDescription">Status description.</param>
            <returns><see langword="true"/> if <see cref="T:OpenTelemetry.Trace.Status"/> was found on the supplied Activity.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.ActivityHelperExtensions.GetTagValue(System.Diagnostics.Activity,System.String)">
            <summary>
            Gets the value of a specific tag on an <see cref="T:System.Diagnostics.Activity"/>.
            </summary>
            <param name="activity">Activity instance.</param>
            <param name="tagName">Case-sensitive tag name to retrieve.</param>
            <returns>Tag value or null if a match was not found.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.ActivityHelperExtensions.TryCheckFirstTag(System.Diagnostics.Activity,System.String,System.Object@)">
            <summary>
            Checks if the user provided tag name is the first tag of the <see cref="T:System.Diagnostics.Activity"/> and retrieves the tag value.
            </summary>
            <param name="activity">Activity instance.</param>
            <param name="tagName">Tag name.</param>
            <param name="tagValue">Tag value.</param>
            <returns><see langword="true"/> if the first tag of the supplied Activity matches the user provide tag name.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.ActivityHelperExtensions.EnumerateTags``1(System.Diagnostics.Activity,``0@)">
            <summary>
            Enumerates all the key/value pairs on an <see cref="T:System.Diagnostics.Activity"/> without performing an allocation.
            </summary>
            <typeparam name="T">The struct <see cref="T:OpenTelemetry.Trace.IActivityEnumerator`1"/> implementation to use for the enumeration.</typeparam>
            <param name="activity">Activity instance.</param>
            <param name="tagEnumerator">Tag enumerator.</param>
        </member>
        <member name="M:OpenTelemetry.Trace.ActivityHelperExtensions.EnumerateLinks``1(System.Diagnostics.Activity,``0@)">
            <summary>
            Enumerates all the <see cref="T:System.Diagnostics.ActivityLink"/>s on an <see cref="T:System.Diagnostics.Activity"/> without performing an allocation.
            </summary>
            <typeparam name="T">The struct <see cref="T:OpenTelemetry.Trace.IActivityEnumerator`1"/> implementation to use for the enumeration.</typeparam>
            <param name="activity">Activity instance.</param>
            <param name="linkEnumerator">Link enumerator.</param>
        </member>
        <member name="M:OpenTelemetry.Trace.ActivityHelperExtensions.EnumerateTags``1(System.Diagnostics.ActivityLink,``0@)">
            <summary>
            Enumerates all the key/value pairs on an <see cref="T:System.Diagnostics.ActivityLink"/> without performing an allocation.
            </summary>
            <typeparam name="T">The struct <see cref="T:OpenTelemetry.Trace.IActivityEnumerator`1"/> implementation to use for the enumeration.</typeparam>
            <param name="activityLink">ActivityLink instance.</param>
            <param name="tagEnumerator">Tag enumerator.</param>
        </member>
        <member name="M:OpenTelemetry.Trace.ActivityHelperExtensions.EnumerateEvents``1(System.Diagnostics.Activity,``0@)">
            <summary>
            Enumerates all the <see cref="T:System.Diagnostics.ActivityEvent"/>s on an <see cref="T:System.Diagnostics.Activity"/> without performing an allocation.
            </summary>
            <typeparam name="T">The struct <see cref="T:OpenTelemetry.Trace.IActivityEnumerator`1"/> implementation to use for the enumeration.</typeparam>
            <param name="activity">Activity instance.</param>
            <param name="eventEnumerator">Event enumerator.</param>
        </member>
        <member name="M:OpenTelemetry.Trace.ActivityHelperExtensions.EnumerateTags``1(System.Diagnostics.ActivityEvent,``0@)">
            <summary>
            Enumerates all the key/value pairs on an <see cref="T:System.Diagnostics.ActivityEvent"/> without performing an allocation.
            </summary>
            <typeparam name="T">The struct <see cref="T:OpenTelemetry.Trace.IActivityEnumerator`1"/> implementation to use for the enumeration.</typeparam>
            <param name="activityEvent">ActivityEvent instance.</param>
            <param name="tagEnumerator">Tag enumerator.</param>
        </member>
        <member name="T:OpenTelemetry.Trace.IActivityEnumerator`1">
            <summary>
            An interface used to perform zero-allocation enumeration of <see cref="T:System.Diagnostics.Activity"/> elements. Implementation must be a struct.
            </summary>
            <typeparam name="T">Enumerated item type.</typeparam>
        </member>
        <member name="M:OpenTelemetry.Trace.IActivityEnumerator`1.ForEach(`0)">
            <summary>
            Called for each <see cref="T:System.Diagnostics.Activity"/> item while the enumeration is executing.
            </summary>
            <param name="item">Enumeration item.</param>
            <returns><see langword="true"/> to continue the enumeration of records or <see langword="false"/> to stop (break) the enumeration.</returns>
        </member>
        <member name="M:OpenTelemetry.Internal.ExceptionExtensions.ToInvariantString(System.Exception)">
            <summary>
            Returns a culture-independent string representation of the given <paramref name="exception"/> object,
            appropriate for diagnostics tracing.
            </summary>
            <param name="exception">Exception to convert to string.</param>
            <returns>Exception as string with no culture.</returns>
        </member>
        <member name="T:OpenTelemetry.Internal.Guard">
            <summary>
            Methods for guarding against exception throwing values.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNull(System.Object,System.String)">
            <summary>
            Throw an exception if the value is null.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Throw an exception if the value is null or empty.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNullOrWhitespace(System.String,System.String)">
            <summary>
            Throw an exception if the value is null or whitespace.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfZero(System.Int32,System.String,System.String)">
            <summary>
            Throw an exception if the value is zero.
            </summary>
            <param name="value">The value to check.</param>
            <param name="message">The message to use in the thrown exception.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfInvalidTimeout(System.Int32,System.String)">
            <summary>
            Throw an exception if the value is not considered a valid timeout.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfOutOfRange(System.Int32,System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Throw an exception if the value is not within the given range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The inclusive upper bound.</param>
            <param name="minName">The name of the lower bound.</param>
            <param name="maxName">The name of the upper bound.</param>
            <param name="message">An optional custom message to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfOutOfRange(System.Double,System.String,System.Double,System.Double,System.String,System.String,System.String)">
            <summary>
            Throw an exception if the value is not within the given range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The inclusive upper bound.</param>
            <param name="minName">The name of the lower bound.</param>
            <param name="maxName">The name of the upper bound.</param>
            <param name="message">An optional custom message to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNotOfType``1(System.Object,System.String)">
            <summary>
            Throw an exception if the value is not of the expected type.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <typeparam name="T">The type attempted to convert to.</typeparam>
            <returns>The value casted to the specified type.</returns>
        </member>
        <member name="T:OpenTelemetry.Internal.EnvironmentVariableHelper">
            <summary>
            EnvironmentVariableHelper facilitates parsing environment variable values as defined by
            <a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/sdk-environment-variables.md">
            the specification</a>.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Internal.EnvironmentVariableHelper.LoadString(System.String,System.String@)">
            <summary>
            Reads an environment variable without any parsing.
            </summary>
            <param name="envVarKey">The name of the environment variable.</param>
            <param name="result">The parsed value of the environment variable.</param>
            <returns>
            Returns <c>true</c> when a non-empty value was read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:OpenTelemetry.Internal.EnvironmentVariableHelper.LoadNumeric(System.String,System.Int32@)">
            <summary>
            Reads an environment variable and parses is as a
            <a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/sdk-environment-variables.md#numeric-value">
            numeric value</a> - a non-negative decimal integer.
            </summary>
            <param name="envVarKey">The name of the environment variable.</param>
            <param name="result">The parsed value of the environment variable.</param>
            <returns>
            Returns <c>true</c> when a non-empty value was read; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown when failed to parse the non-empty value.
            </exception>
        </member>
        <member name="M:OpenTelemetry.Internal.EnvironmentVariableHelper.LoadUri(System.String,System.Uri@)">
            <summary>
            Reads an environment variable and parses it as a <see cref="T:System.Uri" />.
            </summary>
            <param name="envVarKey">The name of the environment variable.</param>
            <param name="result">The parsed value of the environment variable.</param>
            <returns>
            Returns <c>true</c> when a non-empty value was read; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown when failed to parse the non-empty value.
            </exception>
        </member>
        <member name="T:OpenTelemetry.Internal.OpenTelemetrySdkEventSource">
            <summary>
            EventSource implementation for OpenTelemetry SDK implementation.
            </summary>
        </member>
        <member name="T:System.ServiceProviderExtensions">
            <summary>
            Extension methods for OpenTelemetry dependency injection support.
            </summary>
        </member>
        <member name="M:System.ServiceProviderExtensions.GetOptions``1(System.IServiceProvider)">
            <summary>
            Get options from the supplied <see cref="T:System.IServiceProvider"/>.
            </summary>
            <typeparam name="T">Options type.</typeparam>
            <param name="serviceProvider"><see cref="T:System.IServiceProvider"/>.</param>
            <returns>Options instance.</returns>
        </member>
        <member name="T:Opentelemetry.Proto.Collector.Logs.V1.LogsServiceReflection">
            <summary>Holder for reflection information generated from opentelemetry/proto/collector/logs/v1/logs_service.proto</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Collector.Logs.V1.LogsServiceReflection.Descriptor">
            <summary>File descriptor for opentelemetry/proto/collector/logs/v1/logs_service.proto</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Collector.Logs.V1.ExportLogsServiceRequest.ResourceLogsFieldNumber">
            <summary>Field number for the "resource_logs" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Collector.Logs.V1.ExportLogsServiceRequest.ResourceLogs">
            <summary>
            An array of ResourceLogs.
            For data coming from a single resource this array will typically contain one
            element. Intermediary nodes (such as OpenTelemetry Collector) that receive
            data from multiple origins typically batch the data before forwarding further and
            in that case this array will contain multiple elements.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Collector.Logs.V1.LogsService">
            <summary>
            Service that can be used to push logs between one Application instrumented with
            OpenTelemetry and an collector, or between an collector and a central collector (in this
            case logs are sent/received to/from multiple Applications).
            </summary>
        </member>
        <member name="P:Opentelemetry.Proto.Collector.Logs.V1.LogsService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceBase">
            <summary>Base class for server-side implementations of LogsService</summary>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceBase.Export(Opentelemetry.Proto.Collector.Logs.V1.ExportLogsServiceRequest,Grpc.Core.ServerCallContext)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:Opentelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient">
            <summary>Client for LogsService</summary>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for LogsService</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for LogsService that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient.Export(Opentelemetry.Proto.Collector.Logs.V1.ExportLogsServiceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient.Export(Opentelemetry.Proto.Collector.Logs.V1.ExportLogsServiceRequest,Grpc.Core.CallOptions)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient.ExportAsync(Opentelemetry.Proto.Collector.Logs.V1.ExportLogsServiceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient.ExportAsync(Opentelemetry.Proto.Collector.Logs.V1.ExportLogsServiceRequest,Grpc.Core.CallOptions)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Logs.V1.LogsService.BindService(Opentelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Logs.V1.LogsService.BindService(Grpc.Core.ServiceBinderBase,Opentelemetry.Proto.Collector.Logs.V1.LogsService.LogsServiceBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="T:Opentelemetry.Proto.Collector.Metrics.V1.MetricsServiceReflection">
            <summary>Holder for reflection information generated from opentelemetry/proto/collector/metrics/v1/metrics_service.proto</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Collector.Metrics.V1.MetricsServiceReflection.Descriptor">
            <summary>File descriptor for opentelemetry/proto/collector/metrics/v1/metrics_service.proto</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceRequest.ResourceMetricsFieldNumber">
            <summary>Field number for the "resource_metrics" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceRequest.ResourceMetrics">
            <summary>
            An array of ResourceMetrics.
            For data coming from a single resource this array will typically contain one
            element. Intermediary nodes (such as OpenTelemetry Collector) that receive
            data from multiple origins typically batch the data before forwarding further and
            in that case this array will contain multiple elements.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Collector.Metrics.V1.MetricsService">
            <summary>
            Service that can be used to push metrics between one Application
            instrumented with OpenTelemetry and a collector, or between a collector and a
            central collector.
            </summary>
        </member>
        <member name="P:Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceBase">
            <summary>Base class for server-side implementations of MetricsService</summary>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceBase.Export(Opentelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceRequest,Grpc.Core.ServerCallContext)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient">
            <summary>Client for MetricsService</summary>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for MetricsService</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for MetricsService that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient.Export(Opentelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient.Export(Opentelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceRequest,Grpc.Core.CallOptions)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient.ExportAsync(Opentelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient.ExportAsync(Opentelemetry.Proto.Collector.Metrics.V1.ExportMetricsServiceRequest,Grpc.Core.CallOptions)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.BindService(Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.BindService(Grpc.Core.ServiceBinderBase,Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.MetricsServiceBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="T:Opentelemetry.Proto.Collector.Trace.V1.TraceServiceReflection">
            <summary>Holder for reflection information generated from opentelemetry/proto/collector/trace/v1/trace_service.proto</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Collector.Trace.V1.TraceServiceReflection.Descriptor">
            <summary>File descriptor for opentelemetry/proto/collector/trace/v1/trace_service.proto</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Collector.Trace.V1.ExportTraceServiceRequest.ResourceSpansFieldNumber">
            <summary>Field number for the "resource_spans" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Collector.Trace.V1.ExportTraceServiceRequest.ResourceSpans">
            <summary>
            An array of ResourceSpans.
            For data coming from a single resource this array will typically contain one
            element. Intermediary nodes (such as OpenTelemetry Collector) that receive
            data from multiple origins typically batch the data before forwarding further and
            in that case this array will contain multiple elements.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Collector.Trace.V1.TraceService">
            <summary>
            Service that can be used to push spans between one Application instrumented with
            OpenTelemetry and a collector, or between a collector and a central collector (in this
            case spans are sent/received to/from multiple Applications).
            </summary>
        </member>
        <member name="P:Opentelemetry.Proto.Collector.Trace.V1.TraceService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceBase">
            <summary>Base class for server-side implementations of TraceService</summary>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceBase.Export(Opentelemetry.Proto.Collector.Trace.V1.ExportTraceServiceRequest,Grpc.Core.ServerCallContext)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:Opentelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient">
            <summary>Client for TraceService</summary>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for TraceService</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for TraceService that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient.Export(Opentelemetry.Proto.Collector.Trace.V1.ExportTraceServiceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient.Export(Opentelemetry.Proto.Collector.Trace.V1.ExportTraceServiceRequest,Grpc.Core.CallOptions)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient.ExportAsync(Opentelemetry.Proto.Collector.Trace.V1.ExportTraceServiceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient.ExportAsync(Opentelemetry.Proto.Collector.Trace.V1.ExportTraceServiceRequest,Grpc.Core.CallOptions)">
            <summary>
            For performance reasons, it is recommended to keep this RPC
            alive for the entire life of the application.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Trace.V1.TraceService.BindService(Opentelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Opentelemetry.Proto.Collector.Trace.V1.TraceService.BindService(Grpc.Core.ServiceBinderBase,Opentelemetry.Proto.Collector.Trace.V1.TraceService.TraceServiceBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="T:Opentelemetry.Proto.Common.V1.CommonReflection">
            <summary>Holder for reflection information generated from opentelemetry/proto/common/v1/common.proto</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Common.V1.CommonReflection.Descriptor">
            <summary>File descriptor for opentelemetry/proto/common/v1/common.proto</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Common.V1.AnyValue">
            <summary>
            AnyValue is used to represent any type of attribute value. AnyValue may contain a
            primitive value such as a string or integer or it may contain an arbitrary nested
            object containing arrays, key-value lists and primitives.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Common.V1.AnyValue.StringValueFieldNumber">
            <summary>Field number for the "string_value" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Common.V1.AnyValue.BoolValueFieldNumber">
            <summary>Field number for the "bool_value" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Common.V1.AnyValue.IntValueFieldNumber">
            <summary>Field number for the "int_value" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Common.V1.AnyValue.DoubleValueFieldNumber">
            <summary>Field number for the "double_value" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Common.V1.AnyValue.ArrayValueFieldNumber">
            <summary>Field number for the "array_value" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Common.V1.AnyValue.KvlistValueFieldNumber">
            <summary>Field number for the "kvlist_value" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Common.V1.AnyValue.BytesValueFieldNumber">
            <summary>Field number for the "bytes_value" field.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Common.V1.AnyValue.ValueOneofCase">
            <summary>Enum of possible cases for the "value" oneof.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Common.V1.ArrayValue">
            <summary>
            ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
            since oneof in AnyValue does not allow repeated fields.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Common.V1.ArrayValue.ValuesFieldNumber">
            <summary>Field number for the "values" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Common.V1.ArrayValue.Values">
            <summary>
            Array of values. The array may be empty (contain 0 elements).
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Common.V1.KeyValueList">
            <summary>
            KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
            since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
            a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
            avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
            are semantically equivalent.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Common.V1.KeyValueList.ValuesFieldNumber">
            <summary>Field number for the "values" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Common.V1.KeyValueList.Values">
            <summary>
            A collection of key/value pairs of key-value pairs. The list may be empty (may
            contain 0 elements).
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Common.V1.KeyValue">
            <summary>
            KeyValue is a key-value pair that is used to store Span attributes, Link
            attributes, etc.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Common.V1.KeyValue.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Common.V1.KeyValue.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Common.V1.StringKeyValue">
            <summary>
            StringKeyValue is a pair of key/value strings. This is the simpler (and faster) version
            of KeyValue that only supports string values.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Common.V1.StringKeyValue.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Common.V1.StringKeyValue.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Common.V1.InstrumentationLibrary">
            <summary>
            InstrumentationLibrary is a message representing the instrumentation library information
            such as the fully qualified name and version. 
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Common.V1.InstrumentationLibrary.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Common.V1.InstrumentationLibrary.Name">
            <summary>
            An empty instrumentation library name means the name is unknown. 
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Common.V1.InstrumentationLibrary.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Logs.V1.LogsReflection">
            <summary>Holder for reflection information generated from opentelemetry/proto/logs/v1/logs.proto</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Logs.V1.LogsReflection.Descriptor">
            <summary>File descriptor for opentelemetry/proto/logs/v1/logs.proto</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Logs.V1.SeverityNumber">
            <summary>
            Possible values for LogRecord.SeverityNumber.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Logs.V1.SeverityNumber.Unspecified">
            <summary>
            UNSPECIFIED is the default SeverityNumber, it MUST NOT be used.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Logs.V1.LogRecordFlags">
            <summary>
            Masks for LogRecord.flags field.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Logs.V1.LogsData">
             <summary>
             LogsData represents the logs data that can be stored in a persistent storage,
             OR can be embedded by other protocols that transfer OTLP logs data but do not
             implement the OTLP protocol.
            
             The main difference between this message and collector protocol is that
             in this message there will not be any "control" or "metadata" specific to
             OTLP protocol.
            
             When new fields are added into this message, the OTLP request MUST be updated
             as well.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Logs.V1.LogsData.ResourceLogsFieldNumber">
            <summary>Field number for the "resource_logs" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Logs.V1.LogsData.ResourceLogs">
            <summary>
            An array of ResourceLogs.
            For data coming from a single resource this array will typically contain
            one element. Intermediary nodes that receive data from multiple origins
            typically batch the data before forwarding further and in that case this
            array will contain multiple elements.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Logs.V1.ResourceLogs">
            <summary>
            A collection of InstrumentationLibraryLogs from a Resource.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Logs.V1.ResourceLogs.ResourceFieldNumber">
            <summary>Field number for the "resource" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Logs.V1.ResourceLogs.Resource">
            <summary>
            The resource for the logs in this message.
            If this field is not set then resource info is unknown.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Logs.V1.ResourceLogs.InstrumentationLibraryLogsFieldNumber">
            <summary>Field number for the "instrumentation_library_logs" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Logs.V1.ResourceLogs.InstrumentationLibraryLogs">
            <summary>
            A list of InstrumentationLibraryLogs that originate from a resource.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Logs.V1.ResourceLogs.SchemaUrlFieldNumber">
            <summary>Field number for the "schema_url" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Logs.V1.ResourceLogs.SchemaUrl">
            <summary>
            This schema_url applies to the data in the "resource" field. It does not apply
            to the data in the "instrumentation_library_logs" field which have their own
            schema_url field.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Logs.V1.InstrumentationLibraryLogs">
            <summary>
            A collection of Logs produced by an InstrumentationLibrary.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Logs.V1.InstrumentationLibraryLogs.InstrumentationLibraryFieldNumber">
            <summary>Field number for the "instrumentation_library" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Logs.V1.InstrumentationLibraryLogs.InstrumentationLibrary">
            <summary>
            The instrumentation library information for the logs in this message.
            Semantically when InstrumentationLibrary isn't set, it is equivalent with
            an empty instrumentation library name (unknown).
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Logs.V1.InstrumentationLibraryLogs.LogsFieldNumber">
            <summary>Field number for the "logs" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Logs.V1.InstrumentationLibraryLogs.Logs">
            <summary>
            A list of log records.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Logs.V1.InstrumentationLibraryLogs.SchemaUrlFieldNumber">
            <summary>Field number for the "schema_url" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Logs.V1.InstrumentationLibraryLogs.SchemaUrl">
            <summary>
            This schema_url applies to all logs in the "logs" field.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Logs.V1.LogRecord">
            <summary>
            A log record according to OpenTelemetry Log Data Model:
            https://github.com/open-telemetry/oteps/blob/main/text/logs/0097-log-data-model.md
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Logs.V1.LogRecord.TimeUnixNanoFieldNumber">
            <summary>Field number for the "time_unix_nano" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Logs.V1.LogRecord.TimeUnixNano">
            <summary>
            time_unix_nano is the time when the event occurred.
            Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
            Value of 0 indicates unknown or missing timestamp.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Logs.V1.LogRecord.SeverityNumberFieldNumber">
            <summary>Field number for the "severity_number" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Logs.V1.LogRecord.SeverityNumber">
            <summary>
            Numerical value of the severity, normalized to values described in Log Data Model.
            [Optional].
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Logs.V1.LogRecord.SeverityTextFieldNumber">
            <summary>Field number for the "severity_text" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Logs.V1.LogRecord.SeverityText">
            <summary>
            The severity text (also known as log level). The original string representation as
            it is known at the source. [Optional].
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Logs.V1.LogRecord.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Logs.V1.LogRecord.Name">
            <summary>
            Short event identifier that does not contain varying parts. Name describes
            what happened (e.g. "ProcessStarted"). Recommended to be no longer than 50
            characters. Not guaranteed to be unique in any way. [Optional].
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Logs.V1.LogRecord.BodyFieldNumber">
            <summary>Field number for the "body" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Logs.V1.LogRecord.Body">
            <summary>
            A value containing the body of the log record. Can be for example a human-readable
            string message (including multi-line) describing the event in a free form or it can
            be a structured data composed of arrays and maps of other values. [Optional].
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Logs.V1.LogRecord.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Logs.V1.LogRecord.Attributes">
            <summary>
            Additional attributes that describe the specific event occurrence. [Optional].
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Logs.V1.LogRecord.DroppedAttributesCountFieldNumber">
            <summary>Field number for the "dropped_attributes_count" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Logs.V1.LogRecord.FlagsFieldNumber">
            <summary>Field number for the "flags" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Logs.V1.LogRecord.Flags">
            <summary>
            Flags, a bit field. 8 least significant bits are the trace flags as
            defined in W3C Trace Context specification. 24 most significant bits are reserved
            and must be set to 0. Readers must not assume that 24 most significant bits
            will be zero and must correctly mask the bits when reading 8-bit trace flag (use
            flags &amp; TRACE_FLAGS_MASK). [Optional].
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Logs.V1.LogRecord.TraceIdFieldNumber">
            <summary>Field number for the "trace_id" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Logs.V1.LogRecord.TraceId">
            <summary>
            A unique identifier for a trace. All logs from the same trace share
            the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
            is considered invalid. Can be set for logs that are part of request processing
            and have an assigned trace id. [Optional].
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Logs.V1.LogRecord.SpanIdFieldNumber">
            <summary>Field number for the "span_id" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Logs.V1.LogRecord.SpanId">
            <summary>
            A unique identifier for a span within a trace, assigned when the span
            is created. The ID is an 8-byte array. An ID with all zeroes is considered
            invalid. Can be set for logs that are part of a particular processing span.
            If span_id is present trace_id SHOULD be also present. [Optional].
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.Experimental.MetricsConfigServiceReflection">
            <summary>Holder for reflection information generated from opentelemetry/proto/metrics/experimental/metrics_config_service.proto</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.Experimental.MetricsConfigServiceReflection.Descriptor">
            <summary>File descriptor for opentelemetry/proto/metrics/experimental/metrics_config_service.proto</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.Experimental.MetricConfigRequest.ResourceFieldNumber">
            <summary>Field number for the "resource" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.Experimental.MetricConfigRequest.Resource">
            <summary>
            Required. The resource for which configuration should be returned.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.Experimental.MetricConfigRequest.LastKnownFingerprintFieldNumber">
            <summary>Field number for the "last_known_fingerprint" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.Experimental.MetricConfigRequest.LastKnownFingerprint">
            <summary>
            Optional. The value of MetricConfigResponse.fingerprint for the last
            configuration that the caller received and successfully applied.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.FingerprintFieldNumber">
            <summary>Field number for the "fingerprint" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.Fingerprint">
             <summary>
             Optional. The fingerprint associated with this MetricConfigResponse. Each
             change in configs yields a different fingerprint. The resource SHOULD copy
             this value to MetricConfigRequest.last_known_fingerprint for the next
             configuration request. If there are no changes between fingerprint and
             MetricConfigRequest.last_known_fingerprint, then all other fields besides
             fingerprint in the response are optional, or the same as the last update if
             present.
            
             The exact mechanics of generating the fingerprint is up to the
             implementation. However, a fingerprint must be deterministically determined
             by the configurations -- the same configuration will generate the same
             fingerprint on any instance of an implementation. Hence using a timestamp is
             unacceptable, but a deterministic hash is fine.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.SchedulesFieldNumber">
            <summary>Field number for the "schedules" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.Schedules">
             <summary>
             A single metric may match multiple schedules. In such cases, the schedule
             that specifies the smallest period is applied.
            
             Note, for optimization purposes, it is recommended to use as few schedules
             as possible to capture all required metric updates. Where you can be
             conservative, do take full advantage of the inclusion/exclusion patterns to
             capture as much of your targeted metrics.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.SuggestedWaitTimeSecFieldNumber">
            <summary>Field number for the "suggested_wait_time_sec" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.SuggestedWaitTimeSec">
            <summary>
            Optional. The client is suggested to wait this long (in seconds) before
            pinging the configuration service again.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.Types">
            <summary>Container for nested types declared in the MetricConfigResponse message type.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.Types.Schedule">
            <summary>
            A Schedule is used to apply a particular scheduling configuration to
            a metric. If a metric name matches a schedule's patterns, then the metric
            adopts the configuration specified by the schedule.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.Types.Schedule.ExclusionPatternsFieldNumber">
            <summary>Field number for the "exclusion_patterns" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.Types.Schedule.ExclusionPatterns">
            <summary>
            Metrics with names that match a rule in the inclusion_patterns are
            targeted by this schedule. Metrics that match the exclusion_patterns
            are not targeted for this schedule, even if they match an inclusion
            pattern.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.Types.Schedule.InclusionPatternsFieldNumber">
            <summary>Field number for the "inclusion_patterns" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.Types.Schedule.PeriodSecFieldNumber">
            <summary>Field number for the "period_sec" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.Types.Schedule.PeriodSec">
            <summary>
            Describes the collection period for each metric in seconds.
            A period of 0 means to not export.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.Types.Schedule.Types">
            <summary>Container for nested types declared in the Schedule message type.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.Types.Schedule.Types.Pattern">
            <summary>
            A light-weight pattern that can match 1 or more
            metrics, for which this schedule will apply. The string is used to
            match against metric names. It should not exceed 100k characters.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.Types.Schedule.Types.Pattern.EqualToFieldNumber">
            <summary>Field number for the "equal_to" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.Types.Schedule.Types.Pattern.EqualTo">
            <summary>
            matches the metric name exactly
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.Types.Schedule.Types.Pattern.StartsWithFieldNumber">
            <summary>Field number for the "starts_with" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.Types.Schedule.Types.Pattern.StartsWith">
            <summary>
            prefix-matches the metric name
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.Experimental.MetricConfigResponse.Types.Schedule.Types.Pattern.MatchOneofCase">
            <summary>Enum of possible cases for the "match" oneof.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.Experimental.MetricConfig">
            <summary>
            MetricConfig is a service that enables updating metric schedules, trace
            parameters, and other configurations on the SDK without having to restart the
            instrumented application. The collector can also serve as the configuration
            service, acting as a bridge between third-party configuration services and
            the SDK, piping updated configs from a third-party source to an instrumented
            application.
            </summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.Experimental.MetricConfig.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.Experimental.MetricConfig.MetricConfigBase">
            <summary>Base class for server-side implementations of MetricConfig</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.Experimental.MetricConfig.MetricConfigClient">
            <summary>Client for MetricConfig</summary>
        </member>
        <member name="M:Opentelemetry.Proto.Metrics.Experimental.MetricConfig.MetricConfigClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for MetricConfig</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Opentelemetry.Proto.Metrics.Experimental.MetricConfig.MetricConfigClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for MetricConfig that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Opentelemetry.Proto.Metrics.Experimental.MetricConfig.MetricConfigClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Opentelemetry.Proto.Metrics.Experimental.MetricConfig.MetricConfigClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Opentelemetry.Proto.Metrics.Experimental.MetricConfig.MetricConfigClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:Opentelemetry.Proto.Metrics.Experimental.MetricConfig.BindService(Opentelemetry.Proto.Metrics.Experimental.MetricConfig.MetricConfigBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Opentelemetry.Proto.Metrics.Experimental.MetricConfig.BindService(Grpc.Core.ServiceBinderBase,Opentelemetry.Proto.Metrics.Experimental.MetricConfig.MetricConfigBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.MetricsReflection">
            <summary>Holder for reflection information generated from opentelemetry/proto/metrics/v1/metrics.proto</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.MetricsReflection.Descriptor">
            <summary>File descriptor for opentelemetry/proto/metrics/v1/metrics.proto</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.AggregationTemporality">
            <summary>
            AggregationTemporality defines how a metric aggregator reports aggregated
            values. It describes how those values relate to the time interval over
            which they are aggregated.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.AggregationTemporality.Unspecified">
            <summary>
            UNSPECIFIED is the default AggregationTemporality, it MUST not be used.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.AggregationTemporality.Delta">
             <summary>
             DELTA is an AggregationTemporality for a metric aggregator which reports
             changes since last report time. Successive metrics contain aggregation of
             values from continuous and non-overlapping intervals.
            
             The values for a DELTA metric are based only on the time interval
             associated with one measurement cycle. There is no dependency on
             previous measurements like is the case for CUMULATIVE metrics.
            
             For example, consider a system measuring the number of requests that
             it receives and reports the sum of these requests every second as a
             DELTA metric:
            
               1. The system starts receiving at time=t_0.
               2. A request is received, the system measures 1 request.
               3. A request is received, the system measures 1 request.
               4. A request is received, the system measures 1 request.
               5. The 1 second collection cycle ends. A metric is exported for the
                  number of requests received over the interval of time t_0 to
                  t_0+1 with a value of 3.
               6. A request is received, the system measures 1 request.
               7. A request is received, the system measures 1 request.
               8. The 1 second collection cycle ends. A metric is exported for the
                  number of requests received over the interval of time t_0+1 to
                  t_0+2 with a value of 2.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.AggregationTemporality.Cumulative">
             <summary>
             CUMULATIVE is an AggregationTemporality for a metric aggregator which
             reports changes since a fixed start time. This means that current values
             of a CUMULATIVE metric depend on all previous measurements since the
             start time. Because of this, the sender is required to retain this state
             in some form. If this state is lost or invalidated, the CUMULATIVE metric
             values MUST be reset and a new fixed start time following the last
             reported measurement time sent MUST be used.
            
             For example, consider a system measuring the number of requests that
             it receives and reports the sum of these requests every second as a
             CUMULATIVE metric:
            
               1. The system starts receiving at time=t_0.
               2. A request is received, the system measures 1 request.
               3. A request is received, the system measures 1 request.
               4. A request is received, the system measures 1 request.
               5. The 1 second collection cycle ends. A metric is exported for the
                  number of requests received over the interval of time t_0 to
                  t_0+1 with a value of 3.
               6. A request is received, the system measures 1 request.
               7. A request is received, the system measures 1 request.
               8. The 1 second collection cycle ends. A metric is exported for the
                  number of requests received over the interval of time t_0 to
                  t_0+2 with a value of 5.
               9. The system experiences a fault and loses state.
               10. The system recovers and resumes receiving at time=t_1.
               11. A request is received, the system measures 1 request.
               12. The 1 second collection cycle ends. A metric is exported for the
                  number of requests received over the interval of time t_1 to
                  t_0+1 with a value of 1.
            
             Note: Even though, when reporting changes since last report time, using
             CUMULATIVE is valid, it is not recommended. This may cause problems for
             systems that do not use start_time to determine when the aggregation
             value was reset (e.g. Prometheus).
             </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.DataPointFlags">
             <summary>
             DataPointFlags is defined as a protobuf 'uint32' type and is to be used as a
             bit-field representing 32 distinct boolean flags.  Each flag defined in this
             enum is a bit-mask.  To test the presence of a single flag in the flags of
             a data point, for example, use an expression like:
            
               (point.flags &amp; FLAG_NO_RECORDED_VALUE) == FLAG_NO_RECORDED_VALUE
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.DataPointFlags.FlagNoRecordedValue">
            <summary>
            This DataPoint is valid but has no recorded value.  This value
            SHOULD be used to reflect explicitly missing data in a series, as
            for an equivalent to the Prometheus "staleness marker".
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.MetricsData">
             <summary>
             MetricsData represents the metrics data that can be stored in a persistent
             storage, OR can be embedded by other protocols that transfer OTLP metrics
             data but do not implement the OTLP protocol.
            
             The main difference between this message and collector protocol is that
             in this message there will not be any "control" or "metadata" specific to
             OTLP protocol.
            
             When new fields are added into this message, the OTLP request MUST be updated
             as well.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.MetricsData.ResourceMetricsFieldNumber">
            <summary>Field number for the "resource_metrics" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.MetricsData.ResourceMetrics">
            <summary>
            An array of ResourceMetrics.
            For data coming from a single resource this array will typically contain
            one element. Intermediary nodes that receive data from multiple origins
            typically batch the data before forwarding further and in that case this
            array will contain multiple elements.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.ResourceMetrics">
            <summary>
            A collection of InstrumentationLibraryMetrics from a Resource.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.ResourceMetrics.ResourceFieldNumber">
            <summary>Field number for the "resource" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.ResourceMetrics.Resource">
            <summary>
            The resource for the metrics in this message.
            If this field is not set then no resource info is known.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.ResourceMetrics.InstrumentationLibraryMetricsFieldNumber">
            <summary>Field number for the "instrumentation_library_metrics" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.ResourceMetrics.InstrumentationLibraryMetrics">
            <summary>
            A list of metrics that originate from a resource.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.ResourceMetrics.SchemaUrlFieldNumber">
            <summary>Field number for the "schema_url" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.ResourceMetrics.SchemaUrl">
            <summary>
            This schema_url applies to the data in the "resource" field. It does not apply
            to the data in the "instrumentation_library_metrics" field which have their own
            schema_url field.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.InstrumentationLibraryMetrics">
            <summary>
            A collection of Metrics produced by an InstrumentationLibrary.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.InstrumentationLibraryMetrics.InstrumentationLibraryFieldNumber">
            <summary>Field number for the "instrumentation_library" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.InstrumentationLibraryMetrics.InstrumentationLibrary">
            <summary>
            The instrumentation library information for the metrics in this message.
            Semantically when InstrumentationLibrary isn't set, it is equivalent with
            an empty instrumentation library name (unknown).
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.InstrumentationLibraryMetrics.MetricsFieldNumber">
            <summary>Field number for the "metrics" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.InstrumentationLibraryMetrics.Metrics">
            <summary>
            A list of metrics that originate from an instrumentation library.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.InstrumentationLibraryMetrics.SchemaUrlFieldNumber">
            <summary>Field number for the "schema_url" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.InstrumentationLibraryMetrics.SchemaUrl">
            <summary>
            This schema_url applies to all metrics in the "metrics" field.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.Metric">
             <summary>
             Defines a Metric which has one or more timeseries.  The following is a
             brief summary of the Metric data model.  For more details, see:
            
               https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/datamodel.md
            
             The data model and relation between entities is shown in the
             diagram below. Here, "DataPoint" is the term used to refer to any
             one of the specific data point value types, and "points" is the term used
             to refer to any one of the lists of points contained in the Metric.
            
             - Metric is composed of a metadata and data.
             - Metadata part contains a name, description, unit.
             - Data is one of the possible types (Sum, Gauge, Histogram, Summary).
             - DataPoint contains timestamps, attributes, and one of the possible value type
               fields.
            
                 Metric
              +------------+
              |name        |
              |description |
              |unit        |     +------------------------------------+
              |data        |---> |Gauge, Sum, Histogram, Summary, ... |
              +------------+     +------------------------------------+
            
                Data [One of Gauge, Sum, Histogram, Summary, ...]
              +-----------+
              |...        |  // Metadata about the Data.
              |points     |--+
              +-----------+  |
                             |      +---------------------------+
                             |      |DataPoint 1                |
                             v      |+------+------+   +------+ |
                          +-----+   ||label |label |...|label | |
                          |  1  |-->||value1|value2|...|valueN| |
                          +-----+   |+------+------+   +------+ |
                          |  .  |   |+-----+                    |
                          |  .  |   ||value|                    |
                          |  .  |   |+-----+                    |
                          |  .  |   +---------------------------+
                          |  .  |                   .
                          |  .  |                   .
                          |  .  |                   .
                          |  .  |   +---------------------------+
                          |  .  |   |DataPoint M                |
                          +-----+   |+------+------+   +------+ |
                          |  M  |-->||label |label |...|label | |
                          +-----+   ||value1|value2|...|valueN| |
                                    |+------+------+   +------+ |
                                    |+-----+                    |
                                    ||value|                    |
                                    |+-----+                    |
                                    +---------------------------+
            
             Each distinct type of DataPoint represents the output of a specific
             aggregation function, the result of applying the DataPoint's
             associated function of to one or more measurements.
            
             All DataPoint types have three common fields:
             - Attributes includes key-value pairs associated with the data point
             - TimeUnixNano is required, set to the end time of the aggregation
             - StartTimeUnixNano is optional, but strongly encouraged for DataPoints
               having an AggregationTemporality field, as discussed below.
            
             Both TimeUnixNano and StartTimeUnixNano values are expressed as
             UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
            
             # TimeUnixNano
            
             This field is required, having consistent interpretation across
             DataPoint types.  TimeUnixNano is the moment corresponding to when
             the data point's aggregate value was captured.
            
             Data points with the 0 value for TimeUnixNano SHOULD be rejected
             by consumers.
            
             # StartTimeUnixNano
            
             StartTimeUnixNano in general allows detecting when a sequence of
             observations is unbroken.  This field indicates to consumers the
             start time for points with cumulative and delta
             AggregationTemporality, and it should be included whenever possible
             to support correct rate calculation.  Although it may be omitted
             when the start time is truly unknown, setting StartTimeUnixNano is
             strongly encouraged.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Metric.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.Metric.Name">
            <summary>
            name of the metric, including its DNS name prefix. It must be unique.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Metric.DescriptionFieldNumber">
            <summary>Field number for the "description" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.Metric.Description">
            <summary>
            description of the metric, which can be used in documentation.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Metric.UnitFieldNumber">
            <summary>Field number for the "unit" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.Metric.Unit">
            <summary>
            unit in which the metric value is reported. Follows the format
            described by http://unitsofmeasure.org/ucum.html.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Metric.IntGaugeFieldNumber">
            <summary>Field number for the "int_gauge" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.Metric.IntGauge">
            <summary>
            IntGauge and IntSum are deprecated and will be removed soon.
            1. Old senders and receivers that are not aware of this change will
            continue using the `int_gauge` and `int_sum` fields.
            2. New senders, which are aware of this change MUST send only `gauge`
            and `sum` fields.
            3. New receivers, which are aware of this change MUST convert these into
            `gauge` and `sum` by using the provided as_int field in the oneof values.
            This field will be removed in ~3 months, on July 1, 2021.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Metric.GaugeFieldNumber">
            <summary>Field number for the "gauge" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Metric.IntSumFieldNumber">
            <summary>Field number for the "int_sum" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.Metric.IntSum">
            <summary>
            This field will be removed in ~3 months, on July 1, 2021.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Metric.SumFieldNumber">
            <summary>Field number for the "sum" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Metric.IntHistogramFieldNumber">
            <summary>Field number for the "int_histogram" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.Metric.IntHistogram">
            <summary>
            IntHistogram is deprecated and will be removed soon.
            1. Old senders and receivers that are not aware of this change will
            continue using the `int_histogram` field.
            2. New senders, which are aware of this change MUST send only `histogram`.
            3. New receivers, which are aware of this change MUST convert this into
            `histogram` by simply converting all int64 values into float.
            This field will be removed in ~3 months, on July 1, 2021.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Metric.HistogramFieldNumber">
            <summary>Field number for the "histogram" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Metric.ExponentialHistogramFieldNumber">
            <summary>Field number for the "exponential_histogram" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Metric.SummaryFieldNumber">
            <summary>Field number for the "summary" field.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.Metric.DataOneofCase">
            <summary>Enum of possible cases for the "data" oneof.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.Gauge">
             <summary>
             Gauge represents the type of a scalar metric that always exports the
             "current value" for every data point. It should be used for an "unknown"
             aggregation.
            
             A Gauge does not support different aggregation temporalities. Given the
             aggregation is unknown, points cannot be combined using the same
             aggregation, regardless of aggregation temporalities. Therefore,
             AggregationTemporality is not included. Consequently, this also means
             "StartTimeUnixNano" is ignored for all data points.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Gauge.DataPointsFieldNumber">
            <summary>Field number for the "data_points" field.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.Sum">
            <summary>
            Sum represents the type of a scalar metric that is calculated as a sum of all
            reported measurements over a time interval.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Sum.DataPointsFieldNumber">
            <summary>Field number for the "data_points" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Sum.AggregationTemporalityFieldNumber">
            <summary>Field number for the "aggregation_temporality" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.Sum.AggregationTemporality">
            <summary>
            aggregation_temporality describes if the aggregator reports delta changes
            since last report time, or cumulative changes since a fixed start time.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Sum.IsMonotonicFieldNumber">
            <summary>Field number for the "is_monotonic" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.Sum.IsMonotonic">
            <summary>
            If "true" means that the sum is monotonic.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.Histogram">
            <summary>
            Histogram represents the type of a metric that is calculated by aggregating
            as a Histogram of all reported measurements over a time interval.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Histogram.DataPointsFieldNumber">
            <summary>Field number for the "data_points" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Histogram.AggregationTemporalityFieldNumber">
            <summary>Field number for the "aggregation_temporality" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.Histogram.AggregationTemporality">
            <summary>
            aggregation_temporality describes if the aggregator reports delta changes
            since last report time, or cumulative changes since a fixed start time.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.ExponentialHistogram">
            <summary>
            ExponentialHistogram represents the type of a metric that is calculated by aggregating
            as a ExponentialHistogram of all reported double measurements over a time interval.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.ExponentialHistogram.DataPointsFieldNumber">
            <summary>Field number for the "data_points" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.ExponentialHistogram.AggregationTemporalityFieldNumber">
            <summary>Field number for the "aggregation_temporality" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.ExponentialHistogram.AggregationTemporality">
            <summary>
            aggregation_temporality describes if the aggregator reports delta changes
            since last report time, or cumulative changes since a fixed start time.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.Summary">
            <summary>
            Summary metric data are used to convey quantile summaries,
            a Prometheus (see: https://prometheus.io/docs/concepts/metric_types/#summary)
            and OpenMetrics (see: https://github.com/OpenObservability/OpenMetrics/blob/4dbf6075567ab43296eed941037c12951faafb92/protos/prometheus.proto#L45)
            data type. These data points cannot always be merged in a meaningful way.
            While they can be useful in some applications, histogram data points are
            recommended for new applications.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Summary.DataPointsFieldNumber">
            <summary>Field number for the "data_points" field.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.NumberDataPoint">
            <summary>
            NumberDataPoint is a single data point in a timeseries that describes the
            time-varying scalar value of a metric.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.NumberDataPoint.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.NumberDataPoint.Attributes">
            <summary>
            The set of key/value pairs that uniquely identify the timeseries from
            where this point belongs. The list may be empty (may contain 0 elements).
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.NumberDataPoint.LabelsFieldNumber">
            <summary>Field number for the "labels" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.NumberDataPoint.Labels">
             <summary>
             Labels is deprecated and will be removed soon.
             1. Old senders and receivers that are not aware of this change will
             continue using the `labels` field.
             2. New senders, which are aware of this change MUST send only `attributes`.
             3. New receivers, which are aware of this change MUST convert this into
             `labels` by simply converting all int64 values into float.
            
             This field will be removed in ~3 months, on July 1, 2021.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.NumberDataPoint.StartTimeUnixNanoFieldNumber">
            <summary>Field number for the "start_time_unix_nano" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.NumberDataPoint.StartTimeUnixNano">
             <summary>
             StartTimeUnixNano is optional but strongly encouraged, see the
             the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.NumberDataPoint.TimeUnixNanoFieldNumber">
            <summary>Field number for the "time_unix_nano" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.NumberDataPoint.TimeUnixNano">
             <summary>
             TimeUnixNano is required, see the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.NumberDataPoint.AsDoubleFieldNumber">
            <summary>Field number for the "as_double" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.NumberDataPoint.AsIntFieldNumber">
            <summary>Field number for the "as_int" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.NumberDataPoint.ExemplarsFieldNumber">
            <summary>Field number for the "exemplars" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.NumberDataPoint.Exemplars">
            <summary>
            (Optional) List of exemplars collected from
            measurements that were used to form the data point
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.NumberDataPoint.FlagsFieldNumber">
            <summary>Field number for the "flags" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.NumberDataPoint.Flags">
            <summary>
            Flags that apply to this specific data point.  See DataPointFlags
            for the available flags and their meaning.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.NumberDataPoint.ValueOneofCase">
            <summary>Enum of possible cases for the "value" oneof.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint">
             <summary>
             HistogramDataPoint is a single data point in a timeseries that describes the
             time-varying values of a Histogram. A Histogram contains summary statistics
             for a population of values, it may optionally contain the distribution of
             those values across a set of buckets.
            
             If the histogram contains the distribution of values, then both
             "explicit_bounds" and "bucket counts" fields must be defined.
             If the histogram does not contain the distribution of values, then both
             "explicit_bounds" and "bucket_counts" must be omitted and only "count" and
             "sum" are known.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.Attributes">
            <summary>
            The set of key/value pairs that uniquely identify the timeseries from
            where this point belongs. The list may be empty (may contain 0 elements).
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.LabelsFieldNumber">
            <summary>Field number for the "labels" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.Labels">
             <summary>
             Labels is deprecated and will be removed soon.
             1. Old senders and receivers that are not aware of this change will
             continue using the `labels` field.
             2. New senders, which are aware of this change MUST send only `attributes`.
             3. New receivers, which are aware of this change MUST convert this into
             `labels` by simply converting all int64 values into float.
            
             This field will be removed in ~3 months, on July 1, 2021.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.StartTimeUnixNanoFieldNumber">
            <summary>Field number for the "start_time_unix_nano" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.StartTimeUnixNano">
             <summary>
             StartTimeUnixNano is optional but strongly encouraged, see the
             the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.TimeUnixNanoFieldNumber">
            <summary>Field number for the "time_unix_nano" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.TimeUnixNano">
             <summary>
             TimeUnixNano is required, see the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.CountFieldNumber">
            <summary>Field number for the "count" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.Count">
            <summary>
            count is the number of values in the population. Must be non-negative. This
            value must be equal to the sum of the "count" fields in buckets if a
            histogram is provided.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.SumFieldNumber">
            <summary>Field number for the "sum" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.Sum">
             <summary>
             sum of the values in the population. If count is zero then this field
             must be zero.
            
             Note: Sum should only be filled out when measuring non-negative discrete
             events, and is assumed to be monotonic over the values of these events.
             Negative events *can* be recorded, but sum should not be filled out when
             doing so.  This is specifically to enforce compatibility w/ OpenMetrics,
             see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#histogram
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.BucketCountsFieldNumber">
            <summary>Field number for the "bucket_counts" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.BucketCounts">
             <summary>
             bucket_counts is an optional field contains the count values of histogram
             for each bucket.
            
             The sum of the bucket_counts must equal the value in the count field.
            
             The number of elements in bucket_counts array must be by one greater than
             the number of elements in explicit_bounds array.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.ExplicitBoundsFieldNumber">
            <summary>Field number for the "explicit_bounds" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.ExplicitBounds">
             <summary>
             explicit_bounds specifies buckets with explicitly defined bounds for values.
            
             The boundaries for bucket at index i are:
            
             (-infinity, explicit_bounds[i]] for i == 0
             (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; size(explicit_bounds)
             (explicit_bounds[i-1], +infinity) for i == size(explicit_bounds)
            
             The values in the explicit_bounds array must be strictly increasing.
            
             Histogram buckets are inclusive of their upper boundary, except the last
             bucket where the boundary is at infinity. This format is intentionally
             compatible with the OpenMetrics histogram definition.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.ExemplarsFieldNumber">
            <summary>Field number for the "exemplars" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.Exemplars">
            <summary>
            (Optional) List of exemplars collected from
            measurements that were used to form the data point
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.FlagsFieldNumber">
            <summary>Field number for the "flags" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.HistogramDataPoint.Flags">
            <summary>
            Flags that apply to this specific data point.  See DataPointFlags
            for the available flags and their meaning.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint">
            <summary>
            ExponentialHistogramDataPoint is a single data point in a timeseries that describes the
            time-varying values of a ExponentialHistogram of double values. A ExponentialHistogram contains
            summary statistics for a population of values, it may optionally contain the
            distribution of those values across a set of buckets.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Attributes">
            <summary>
            The set of key/value pairs that uniquely identify the timeseries from
            where this point belongs. The list may be empty (may contain 0 elements).
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.StartTimeUnixNanoFieldNumber">
            <summary>Field number for the "start_time_unix_nano" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.StartTimeUnixNano">
             <summary>
             StartTimeUnixNano is optional but strongly encouraged, see the
             the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.TimeUnixNanoFieldNumber">
            <summary>Field number for the "time_unix_nano" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.TimeUnixNano">
             <summary>
             TimeUnixNano is required, see the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.CountFieldNumber">
            <summary>Field number for the "count" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Count">
            <summary>
            count is the number of values in the population. Must be
            non-negative. This value must be equal to the sum of the "bucket_counts"
            values in the positive and negative Buckets plus the "zero_count" field.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.SumFieldNumber">
            <summary>Field number for the "sum" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Sum">
             <summary>
             sum of the values in the population. If count is zero then this field
             must be zero.
            
             Note: Sum should only be filled out when measuring non-negative discrete
             events, and is assumed to be monotonic over the values of these events.
             Negative events *can* be recorded, but sum should not be filled out when
             doing so.  This is specifically to enforce compatibility w/ OpenMetrics,
             see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#histogram
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.ScaleFieldNumber">
            <summary>Field number for the "scale" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Scale">
             <summary>
             scale describes the resolution of the histogram.  Boundaries are
             located at powers of the base, where:
            
               base = (2^(2^-scale))
            
             The histogram bucket identified by `index`, a signed integer,
             contains values that are greater than or equal to (base^index) and
             less than (base^(index+1)).
            
             The positive and negative ranges of the histogram are expressed
             separately.  Negative values are mapped by their absolute value
             into the negative range using the same scale as the positive range.
            
             scale is not restricted by the protocol, as the permissible
             values depend on the range of the data.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.ZeroCountFieldNumber">
            <summary>Field number for the "zero_count" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.ZeroCount">
             <summary>
             zero_count is the count of values that are either exactly zero or
             within the region considered zero by the instrumentation at the
             tolerated degree of precision.  This bucket stores values that
             cannot be expressed using the standard exponential formula as
             well as values that have been rounded to zero.
            
             Implementations MAY consider the zero bucket to have probability
             mass equal to (zero_count / count).
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.PositiveFieldNumber">
            <summary>Field number for the "positive" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Positive">
            <summary>
            positive carries the positive range of exponential bucket counts.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.NegativeFieldNumber">
            <summary>Field number for the "negative" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Negative">
            <summary>
            negative carries the negative range of exponential bucket counts.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.FlagsFieldNumber">
            <summary>Field number for the "flags" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Flags">
            <summary>
            Flags that apply to this specific data point.  See DataPointFlags
            for the available flags and their meaning.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.ExemplarsFieldNumber">
            <summary>Field number for the "exemplars" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Exemplars">
            <summary>
            (Optional) List of exemplars collected from
            measurements that were used to form the data point
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Types">
            <summary>Container for nested types declared in the ExponentialHistogramDataPoint message type.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Types.Buckets">
            <summary>
            Buckets are a set of bucket counts, encoded in a contiguous array
            of counts.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Types.Buckets.OffsetFieldNumber">
            <summary>Field number for the "offset" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Types.Buckets.Offset">
            <summary>
            Offset is the bucket index of the first entry in the bucket_counts array.
            
            Note: This uses a varint encoding as a simple form of compression.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Types.Buckets.BucketCountsFieldNumber">
            <summary>Field number for the "bucket_counts" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.ExponentialHistogramDataPoint.Types.Buckets.BucketCounts">
             <summary>
             Count is an array of counts, where count[i] carries the count
             of the bucket at index (offset+i).  count[i] is the count of
             values greater than or equal to base^(offset+i) and less than
             base^(offset+i+1).
            
             Note: By contrast, the explicit HistogramDataPoint uses
             fixed64.  This field is expected to have many buckets,
             especially zeros, so uint64 has been selected to ensure
             varint encoding.
             </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint">
            <summary>
            SummaryDataPoint is a single data point in a timeseries that describes the
            time-varying values of a Summary metric.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.Attributes">
            <summary>
            The set of key/value pairs that uniquely identify the timeseries from
            where this point belongs. The list may be empty (may contain 0 elements).
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.LabelsFieldNumber">
            <summary>Field number for the "labels" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.Labels">
             <summary>
             Labels is deprecated and will be removed soon.
             1. Old senders and receivers that are not aware of this change will
             continue using the `labels` field.
             2. New senders, which are aware of this change MUST send only `attributes`.
             3. New receivers, which are aware of this change MUST convert this into
             `labels` by simply converting all int64 values into float.
            
             This field will be removed in ~3 months, on July 1, 2021.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.StartTimeUnixNanoFieldNumber">
            <summary>Field number for the "start_time_unix_nano" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.StartTimeUnixNano">
             <summary>
             StartTimeUnixNano is optional but strongly encouraged, see the
             the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.TimeUnixNanoFieldNumber">
            <summary>Field number for the "time_unix_nano" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.TimeUnixNano">
             <summary>
             TimeUnixNano is required, see the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.CountFieldNumber">
            <summary>Field number for the "count" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.Count">
            <summary>
            count is the number of values in the population. Must be non-negative.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.SumFieldNumber">
            <summary>Field number for the "sum" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.Sum">
             <summary>
             sum of the values in the population. If count is zero then this field
             must be zero.
            
             Note: Sum should only be filled out when measuring non-negative discrete
             events, and is assumed to be monotonic over the values of these events.
             Negative events *can* be recorded, but sum should not be filled out when
             doing so.  This is specifically to enforce compatibility w/ OpenMetrics,
             see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#summary
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.QuantileValuesFieldNumber">
            <summary>Field number for the "quantile_values" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.QuantileValues">
            <summary>
            (Optional) list of values at different quantiles of the distribution calculated
            from the current snapshot. The quantiles must be strictly increasing.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.FlagsFieldNumber">
            <summary>Field number for the "flags" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.Flags">
            <summary>
            Flags that apply to this specific data point.  See DataPointFlags
            for the available flags and their meaning.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.Types">
            <summary>Container for nested types declared in the SummaryDataPoint message type.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.Types.ValueAtQuantile">
             <summary>
             Represents the value at a given quantile of a distribution.
            
             To record Min and Max values following conventions are used:
             - The 1.0 quantile is equivalent to the maximum value observed.
             - The 0.0 quantile is equivalent to the minimum value observed.
            
             See the following issue for more context:
             https://github.com/open-telemetry/opentelemetry-proto/issues/125
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.Types.ValueAtQuantile.QuantileFieldNumber">
            <summary>Field number for the "quantile" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.Types.ValueAtQuantile.Quantile">
            <summary>
            The quantile of a distribution. Must be in the interval
            [0.0, 1.0].
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.Types.ValueAtQuantile.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.SummaryDataPoint.Types.ValueAtQuantile.Value">
             <summary>
             The value at the given quantile of a distribution.
            
             Quantile values must NOT be negative.
             </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.Exemplar">
            <summary>
            A representation of an exemplar, which is a sample input measurement.
            Exemplars also hold information about the environment when the measurement
            was recorded, for example the span and trace ID of the active span when the
            exemplar was recorded.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Exemplar.FilteredAttributesFieldNumber">
            <summary>Field number for the "filtered_attributes" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.Exemplar.FilteredAttributes">
            <summary>
            The set of key/value pairs that were filtered out by the aggregator, but
            recorded alongside the original measurement. Only key/value pairs that were
            filtered out by the aggregator should be included
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Exemplar.FilteredLabelsFieldNumber">
            <summary>Field number for the "filtered_labels" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.Exemplar.FilteredLabels">
             <summary>
             Labels is deprecated and will be removed soon.
             1. Old senders and receivers that are not aware of this change will
             continue using the `filtered_labels` field.
             2. New senders, which are aware of this change MUST send only
             `filtered_attributes`.
             3. New receivers, which are aware of this change MUST convert this into
             `filtered_labels` by simply converting all int64 values into float.
            
             This field will be removed in ~3 months, on July 1, 2021.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Exemplar.TimeUnixNanoFieldNumber">
            <summary>Field number for the "time_unix_nano" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.Exemplar.TimeUnixNano">
             <summary>
             time_unix_nano is the exact time when this exemplar was recorded
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Exemplar.AsDoubleFieldNumber">
            <summary>Field number for the "as_double" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Exemplar.AsIntFieldNumber">
            <summary>Field number for the "as_int" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Exemplar.SpanIdFieldNumber">
            <summary>Field number for the "span_id" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.Exemplar.SpanId">
            <summary>
            (Optional) Span ID of the exemplar trace.
            span_id may be missing if the measurement is not recorded inside a trace
            or if the trace is not sampled.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.Exemplar.TraceIdFieldNumber">
            <summary>Field number for the "trace_id" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.Exemplar.TraceId">
            <summary>
            (Optional) Trace ID of the exemplar trace.
            trace_id may be missing if the measurement is not recorded inside a trace
            or if the trace is not sampled.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.Exemplar.ValueOneofCase">
            <summary>Enum of possible cases for the "value" oneof.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.IntDataPoint">
            <summary>
            IntDataPoint is deprecated. Use integer value in NumberDataPoint.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntDataPoint.LabelsFieldNumber">
            <summary>Field number for the "labels" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntDataPoint.Labels">
            <summary>
            The set of labels that uniquely identify this timeseries.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntDataPoint.StartTimeUnixNanoFieldNumber">
            <summary>Field number for the "start_time_unix_nano" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntDataPoint.StartTimeUnixNano">
             <summary>
             StartTimeUnixNano is optional but strongly encouraged, see the
             the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntDataPoint.TimeUnixNanoFieldNumber">
            <summary>Field number for the "time_unix_nano" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntDataPoint.TimeUnixNano">
             <summary>
             TimeUnixNano is required, see the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntDataPoint.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntDataPoint.Value">
            <summary>
            value itself.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntDataPoint.ExemplarsFieldNumber">
            <summary>Field number for the "exemplars" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntDataPoint.Exemplars">
            <summary>
            (Optional) List of exemplars collected from
            measurements that were used to form the data point
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.IntGauge">
            <summary>
            IntGauge is deprecated.  Use Gauge with an integer value in NumberDataPoint.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntGauge.DataPointsFieldNumber">
            <summary>Field number for the "data_points" field.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.IntSum">
            <summary>
            IntSum is deprecated.  Use Sum with an integer value in NumberDataPoint.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntSum.DataPointsFieldNumber">
            <summary>Field number for the "data_points" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntSum.AggregationTemporalityFieldNumber">
            <summary>Field number for the "aggregation_temporality" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntSum.AggregationTemporality">
            <summary>
            aggregation_temporality describes if the aggregator reports delta changes
            since last report time, or cumulative changes since a fixed start time.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntSum.IsMonotonicFieldNumber">
            <summary>Field number for the "is_monotonic" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntSum.IsMonotonic">
            <summary>
            If "true" means that the sum is monotonic.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.IntHistogramDataPoint">
            <summary>
            IntHistogramDataPoint is deprecated; use HistogramDataPoint.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntHistogramDataPoint.LabelsFieldNumber">
            <summary>Field number for the "labels" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntHistogramDataPoint.Labels">
            <summary>
            The set of labels that uniquely identify this timeseries.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntHistogramDataPoint.StartTimeUnixNanoFieldNumber">
            <summary>Field number for the "start_time_unix_nano" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntHistogramDataPoint.StartTimeUnixNano">
             <summary>
             StartTimeUnixNano is optional but strongly encouraged, see the
             the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntHistogramDataPoint.TimeUnixNanoFieldNumber">
            <summary>Field number for the "time_unix_nano" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntHistogramDataPoint.TimeUnixNano">
             <summary>
             TimeUnixNano is required, see the detailed comments above Metric.
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntHistogramDataPoint.CountFieldNumber">
            <summary>Field number for the "count" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntHistogramDataPoint.Count">
            <summary>
            count is the number of values in the population. Must be non-negative. This
            value must be equal to the sum of the "count" fields in buckets if a
            histogram is provided.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntHistogramDataPoint.SumFieldNumber">
            <summary>Field number for the "sum" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntHistogramDataPoint.Sum">
            <summary>
            sum of the values in the population. If count is zero then this field
            must be zero. This value must be equal to the sum of the "sum" fields in
            buckets if a histogram is provided.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntHistogramDataPoint.BucketCountsFieldNumber">
            <summary>Field number for the "bucket_counts" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntHistogramDataPoint.BucketCounts">
             <summary>
             bucket_counts is an optional field contains the count values of histogram
             for each bucket.
            
             The sum of the bucket_counts must equal the value in the count field.
            
             The number of elements in bucket_counts array must be by one greater than
             the number of elements in explicit_bounds array.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntHistogramDataPoint.ExplicitBoundsFieldNumber">
            <summary>Field number for the "explicit_bounds" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntHistogramDataPoint.ExplicitBounds">
             <summary>
             explicit_bounds specifies buckets with explicitly defined bounds for values.
            
             The boundaries for bucket at index i are:
            
             (-infinity, explicit_bounds[i]] for i == 0
             (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; size(explicit_bounds)
             (explicit_bounds[i-1], +infinity) for i == size(explicit_bounds)
            
             The values in the explicit_bounds array must be strictly increasing.
            
             Histogram buckets are inclusive of their upper boundary, except the last
             bucket where the boundary is at infinity. This format is intentionally
             compatible with the OpenMetrics histogram definition.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntHistogramDataPoint.ExemplarsFieldNumber">
            <summary>Field number for the "exemplars" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntHistogramDataPoint.Exemplars">
            <summary>
            (Optional) List of exemplars collected from
            measurements that were used to form the data point
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.IntHistogram">
            <summary>
            IntHistogram is deprecated, replaced by Histogram points using double-
            valued exemplars.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntHistogram.DataPointsFieldNumber">
            <summary>Field number for the "data_points" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntHistogram.AggregationTemporalityFieldNumber">
            <summary>Field number for the "aggregation_temporality" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntHistogram.AggregationTemporality">
            <summary>
            aggregation_temporality describes if the aggregator reports delta changes
            since last report time, or cumulative changes since a fixed start time.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Metrics.V1.IntExemplar">
            <summary>
            IntExemplar is deprecated. Use Exemplar with as_int for value
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntExemplar.FilteredLabelsFieldNumber">
            <summary>Field number for the "filtered_labels" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntExemplar.FilteredLabels">
            <summary>
            The set of labels that were filtered out by the aggregator, but recorded
            alongside the original measurement. Only labels that were filtered out
            by the aggregator should be included
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntExemplar.TimeUnixNanoFieldNumber">
            <summary>Field number for the "time_unix_nano" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntExemplar.TimeUnixNano">
             <summary>
             time_unix_nano is the exact time when this exemplar was recorded
            
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
             1970.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntExemplar.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntExemplar.Value">
            <summary>
            Numerical int value of the measurement that was recorded.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntExemplar.SpanIdFieldNumber">
            <summary>Field number for the "span_id" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntExemplar.SpanId">
            <summary>
            (Optional) Span ID of the exemplar trace.
            span_id may be missing if the measurement is not recorded inside a trace
            or if the trace is not sampled.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Metrics.V1.IntExemplar.TraceIdFieldNumber">
            <summary>Field number for the "trace_id" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Metrics.V1.IntExemplar.TraceId">
            <summary>
            (Optional) Trace ID of the exemplar trace.
            trace_id may be missing if the measurement is not recorded inside a trace
            or if the trace is not sampled.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Resource.V1.ResourceReflection">
            <summary>Holder for reflection information generated from opentelemetry/proto/resource/v1/resource.proto</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Resource.V1.ResourceReflection.Descriptor">
            <summary>File descriptor for opentelemetry/proto/resource/v1/resource.proto</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Resource.V1.Resource">
            <summary>
            Resource information.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Resource.V1.Resource.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Resource.V1.Resource.Attributes">
            <summary>
            Set of labels that describe the resource.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Resource.V1.Resource.DroppedAttributesCountFieldNumber">
            <summary>Field number for the "dropped_attributes_count" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Resource.V1.Resource.DroppedAttributesCount">
            <summary>
            dropped_attributes_count is the number of dropped attributes. If the value is 0, then
            no attributes were dropped.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.TraceReflection">
            <summary>Holder for reflection information generated from opentelemetry/proto/trace/v1/trace.proto</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.TraceReflection.Descriptor">
            <summary>File descriptor for opentelemetry/proto/trace/v1/trace.proto</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.TracesData">
             <summary>
             TracesData represents the traces data that can be stored in a persistent storage,
             OR can be embedded by other protocols that transfer OTLP traces data but do
             not implement the OTLP protocol.
            
             The main difference between this message and collector protocol is that
             in this message there will not be any "control" or "metadata" specific to
             OTLP protocol.
            
             When new fields are added into this message, the OTLP request MUST be updated
             as well.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.TracesData.ResourceSpansFieldNumber">
            <summary>Field number for the "resource_spans" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.TracesData.ResourceSpans">
            <summary>
            An array of ResourceSpans.
            For data coming from a single resource this array will typically contain
            one element. Intermediary nodes that receive data from multiple origins
            typically batch the data before forwarding further and in that case this
            array will contain multiple elements.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.ResourceSpans">
            <summary>
            A collection of InstrumentationLibrarySpans from a Resource.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.ResourceSpans.ResourceFieldNumber">
            <summary>Field number for the "resource" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.ResourceSpans.Resource">
            <summary>
            The resource for the spans in this message.
            If this field is not set then no resource info is known.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.ResourceSpans.InstrumentationLibrarySpansFieldNumber">
            <summary>Field number for the "instrumentation_library_spans" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.ResourceSpans.InstrumentationLibrarySpans">
            <summary>
            A list of InstrumentationLibrarySpans that originate from a resource.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.ResourceSpans.SchemaUrlFieldNumber">
            <summary>Field number for the "schema_url" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.ResourceSpans.SchemaUrl">
            <summary>
            This schema_url applies to the data in the "resource" field. It does not apply
            to the data in the "instrumentation_library_spans" field which have their own
            schema_url field.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.InstrumentationLibrarySpans">
            <summary>
            A collection of Spans produced by an InstrumentationLibrary.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.InstrumentationLibrarySpans.InstrumentationLibraryFieldNumber">
            <summary>Field number for the "instrumentation_library" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.InstrumentationLibrarySpans.InstrumentationLibrary">
            <summary>
            The instrumentation library information for the spans in this message.
            Semantically when InstrumentationLibrary isn't set, it is equivalent with
            an empty instrumentation library name (unknown).
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.InstrumentationLibrarySpans.SpansFieldNumber">
            <summary>Field number for the "spans" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.InstrumentationLibrarySpans.Spans">
            <summary>
            A list of Spans that originate from an instrumentation library.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.InstrumentationLibrarySpans.SchemaUrlFieldNumber">
            <summary>Field number for the "schema_url" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.InstrumentationLibrarySpans.SchemaUrl">
            <summary>
            This schema_url applies to all spans and span events in the "spans" field.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.Span">
             <summary>
             Span represents a single operation within a trace. Spans can be
             nested to form a trace tree. Spans may also be linked to other spans
             from the same or different trace and form graphs. Often, a trace
             contains a root span that describes the end-to-end latency, and one
             or more subspans for its sub-operations. A trace can also contain
             multiple root spans, or none at all. Spans do not need to be
             contiguous - there may be gaps or overlaps between spans in a trace.
            
             The next available field id is 17.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.TraceIdFieldNumber">
            <summary>Field number for the "trace_id" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.TraceId">
             <summary>
             A unique identifier for a trace. All spans from the same trace share
             the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
             is considered invalid.
            
             This field is semantically required. Receiver should generate new
             random trace_id if empty or invalid trace_id was received.
            
             This field is required.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.SpanIdFieldNumber">
            <summary>Field number for the "span_id" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.SpanId">
             <summary>
             A unique identifier for a span within a trace, assigned when the span
             is created. The ID is an 8-byte array. An ID with all zeroes is considered
             invalid.
            
             This field is semantically required. Receiver should generate new
             random span_id if empty or invalid span_id was received.
            
             This field is required.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.TraceStateFieldNumber">
            <summary>Field number for the "trace_state" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.TraceState">
            <summary>
            trace_state conveys information about request position in multiple distributed tracing graphs.
            It is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header
            See also https://github.com/w3c/distributed-tracing for more details about this field.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.ParentSpanIdFieldNumber">
            <summary>Field number for the "parent_span_id" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.ParentSpanId">
            <summary>
            The `span_id` of this span's parent span. If this is a root span, then this
            field must be empty. The ID is an 8-byte array.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.Name">
             <summary>
             A description of the span's operation.
            
             For example, the name can be a qualified method name or a file name
             and a line number where the operation is called. A best practice is to use
             the same display name at the same call point in an application.
             This makes it easier to correlate spans in different traces.
            
             This field is semantically required to be set to non-empty string.
             Empty value is equivalent to an unknown span name.
            
             This field is required.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.KindFieldNumber">
            <summary>Field number for the "kind" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.Kind">
            <summary>
            Distinguishes between spans generated in a particular context. For example,
            two spans with the same name may be distinguished using `CLIENT` (caller)
            and `SERVER` (callee) to identify queueing latency associated with the span.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.StartTimeUnixNanoFieldNumber">
            <summary>Field number for the "start_time_unix_nano" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.StartTimeUnixNano">
             <summary>
             start_time_unix_nano is the start time of the span. On the client side, this is the time
             kept by the local machine where the span execution starts. On the server side, this
             is the time when the server's application handler starts running.
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
            
             This field is semantically required and it is expected that end_time >= start_time.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.EndTimeUnixNanoFieldNumber">
            <summary>Field number for the "end_time_unix_nano" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.EndTimeUnixNano">
             <summary>
             end_time_unix_nano is the end time of the span. On the client side, this is the time
             kept by the local machine where the span execution ends. On the server side, this
             is the time when the server application handler stops running.
             Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
            
             This field is semantically required and it is expected that end_time >= start_time.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.Attributes">
             <summary>
             attributes is a collection of key/value pairs. Note, global attributes
             like server name can be set using the resource API. Examples of attributes:
            
                 "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
                 "/http/server_latency": 300
                 "abc.com/myattribute": true
                 "abc.com/score": 10.239
            
             The OpenTelemetry API specification further restricts the allowed value types:
             https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/common.md#attributes
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.DroppedAttributesCountFieldNumber">
            <summary>Field number for the "dropped_attributes_count" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.DroppedAttributesCount">
            <summary>
            dropped_attributes_count is the number of attributes that were discarded. Attributes
            can be discarded because their keys are too long or because there are too many
            attributes. If this value is 0, then no attributes were dropped.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.EventsFieldNumber">
            <summary>Field number for the "events" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.Events">
            <summary>
            events is a collection of Event items.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.DroppedEventsCountFieldNumber">
            <summary>Field number for the "dropped_events_count" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.DroppedEventsCount">
            <summary>
            dropped_events_count is the number of dropped events. If the value is 0, then no
            events were dropped.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.LinksFieldNumber">
            <summary>Field number for the "links" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.Links">
            <summary>
            links is a collection of Links, which are references from this span to a span
            in the same or different trace.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.DroppedLinksCountFieldNumber">
            <summary>Field number for the "dropped_links_count" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.DroppedLinksCount">
            <summary>
            dropped_links_count is the number of dropped links after the maximum size was
            enforced. If this value is 0, then no links were dropped.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.Status">
            <summary>
            An optional final status for this span. Semantically when Status isn't set, it means
            span's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0).
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.Span.Types">
            <summary>Container for nested types declared in the Span message type.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.Span.Types.SpanKind">
            <summary>
            SpanKind is the type of span. Can be used to specify additional relationships between spans
            in addition to a parent/child relationship.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.Types.SpanKind.Unspecified">
            <summary>
            Unspecified. Do NOT use as default.
            Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.Types.SpanKind.Internal">
            <summary>
            Indicates that the span represents an internal operation within an application,
            as opposed to an operation happening at the boundaries. Default value.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.Types.SpanKind.Server">
            <summary>
            Indicates that the span covers server-side handling of an RPC or other
            remote network request.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.Types.SpanKind.Client">
            <summary>
            Indicates that the span describes a request to some remote service.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.Types.SpanKind.Producer">
            <summary>
            Indicates that the span describes a producer sending a message to a broker.
            Unlike CLIENT and SERVER, there is often no direct critical path latency relationship
            between producer and consumer spans. A PRODUCER span ends when the message was accepted
            by the broker while the logical processing of the message might span a much longer time.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.Types.SpanKind.Consumer">
            <summary>
            Indicates that the span describes consumer receiving a message from a broker.
            Like the PRODUCER kind, there is often no direct critical path latency relationship
            between producer and consumer spans.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.Span.Types.Event">
            <summary>
            Event is a time-stamped annotation of the span, consisting of user-supplied
            text description and key-value pairs.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.Types.Event.TimeUnixNanoFieldNumber">
            <summary>Field number for the "time_unix_nano" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.Types.Event.TimeUnixNano">
            <summary>
            time_unix_nano is the time the event occurred.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.Types.Event.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.Types.Event.Name">
            <summary>
            name of the event.
            This field is semantically required to be set to non-empty string.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.Types.Event.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.Types.Event.Attributes">
            <summary>
            attributes is a collection of attribute key/value pairs on the event.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.Types.Event.DroppedAttributesCountFieldNumber">
            <summary>Field number for the "dropped_attributes_count" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.Types.Event.DroppedAttributesCount">
            <summary>
            dropped_attributes_count is the number of dropped attributes. If the value is 0,
            then no attributes were dropped.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.Span.Types.Link">
            <summary>
            A pointer from the current span to another span in the same trace or in a
            different trace. For example, this can be used in batching operations,
            where a single batch handler processes multiple requests from different
            traces or when the handler receives a request from a different project.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.Types.Link.TraceIdFieldNumber">
            <summary>Field number for the "trace_id" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.Types.Link.TraceId">
            <summary>
            A unique identifier of a trace that this linked span is part of. The ID is a
            16-byte array.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.Types.Link.SpanIdFieldNumber">
            <summary>Field number for the "span_id" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.Types.Link.SpanId">
            <summary>
            A unique identifier for the linked span. The ID is an 8-byte array.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.Types.Link.TraceStateFieldNumber">
            <summary>Field number for the "trace_state" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.Types.Link.TraceState">
            <summary>
            The trace_state associated with the link.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.Types.Link.AttributesFieldNumber">
            <summary>Field number for the "attributes" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.Types.Link.Attributes">
            <summary>
            attributes is a collection of attribute key/value pairs on the link.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Span.Types.Link.DroppedAttributesCountFieldNumber">
            <summary>Field number for the "dropped_attributes_count" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Span.Types.Link.DroppedAttributesCount">
            <summary>
            dropped_attributes_count is the number of dropped attributes. If the value is 0,
            then no attributes were dropped.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.Status">
            <summary>
            The Status type defines a logical error model that is suitable for different
            programming environments, including REST APIs and RPC APIs.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Status.DeprecatedCodeFieldNumber">
            <summary>Field number for the "deprecated_code" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Status.DeprecatedCode">
             <summary>
             The deprecated status code. This is an optional field.
            
             This field is deprecated and is replaced by the `code` field below. See backward
             compatibility notes below. According to our stability guarantees this field
             will be removed in 12 months, on Oct 22, 2021. All usage of old senders and
             receivers that do not understand the `code` field MUST be phased out by then.
             </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Status.MessageFieldNumber">
            <summary>Field number for the "message" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Status.Message">
            <summary>
            A developer-facing human readable error message.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Status.CodeFieldNumber">
            <summary>Field number for the "code" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.Status.Code">
            <summary>
            The status code.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.Status.Types">
            <summary>Container for nested types declared in the Status message type.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.Status.Types.StatusCode">
            <summary>
            For the semantics of status codes see
            https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#set-status
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Status.Types.StatusCode.Unset">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Status.Types.StatusCode.Ok">
            <summary>
            The Span has been validated by an Application developers or Operator to have
            completed successfully.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.Status.Types.StatusCode.Error">
            <summary>
            The Span contains an error.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.TraceConfigReflection">
            <summary>Holder for reflection information generated from opentelemetry/proto/trace/v1/trace_config.proto</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.TraceConfigReflection.Descriptor">
            <summary>File descriptor for opentelemetry/proto/trace/v1/trace_config.proto</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.TraceConfig">
            <summary>
            Global configuration of the trace service. All fields must be specified, or
            the default (zero) values will be used for each type.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.TraceConfig.ConstantSamplerFieldNumber">
            <summary>Field number for the "constant_sampler" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.TraceConfig.TraceIdRatioBasedFieldNumber">
            <summary>Field number for the "trace_id_ratio_based" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.TraceConfig.RateLimitingSamplerFieldNumber">
            <summary>Field number for the "rate_limiting_sampler" field.</summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.TraceConfig.MaxNumberOfAttributesFieldNumber">
            <summary>Field number for the "max_number_of_attributes" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.TraceConfig.MaxNumberOfAttributes">
            <summary>
            The global default max number of attributes per span.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.TraceConfig.MaxNumberOfTimedEventsFieldNumber">
            <summary>Field number for the "max_number_of_timed_events" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.TraceConfig.MaxNumberOfTimedEvents">
            <summary>
            The global default max number of annotation events per span.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.TraceConfig.MaxNumberOfAttributesPerTimedEventFieldNumber">
            <summary>Field number for the "max_number_of_attributes_per_timed_event" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.TraceConfig.MaxNumberOfAttributesPerTimedEvent">
            <summary>
            The global default max number of attributes per timed event.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.TraceConfig.MaxNumberOfLinksFieldNumber">
            <summary>Field number for the "max_number_of_links" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.TraceConfig.MaxNumberOfLinks">
            <summary>
            The global default max number of link entries per span.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.TraceConfig.MaxNumberOfAttributesPerLinkFieldNumber">
            <summary>Field number for the "max_number_of_attributes_per_link" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.TraceConfig.MaxNumberOfAttributesPerLink">
            <summary>
            The global default max number of attributes per span.
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.TraceConfig.SamplerOneofCase">
            <summary>Enum of possible cases for the "sampler" oneof.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.ConstantSampler">
            <summary>
            Sampler that always makes a constant decision on span sampling.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.ConstantSampler.DecisionFieldNumber">
            <summary>Field number for the "decision" field.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.ConstantSampler.Types">
            <summary>Container for nested types declared in the ConstantSampler message type.</summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.ConstantSampler.Types.ConstantDecision">
            <summary>
            How spans should be sampled:
            - Always off
            - Always on
            - Always follow the parent Span's decision (off if no parent).
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.TraceIdRatioBased">
            <summary>
            Sampler that tries to uniformly sample traces with a given ratio.
            The ratio of sampling a trace is equal to that of the specified ratio.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.TraceIdRatioBased.SamplingRatioFieldNumber">
            <summary>Field number for the "samplingRatio" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.TraceIdRatioBased.SamplingRatio">
            <summary>
            The desired ratio of sampling. Must be within [0.0, 1.0].
            </summary>
        </member>
        <member name="T:Opentelemetry.Proto.Trace.V1.RateLimitingSampler">
            <summary>
            Sampler that tries to sample with a rate per time window.
            </summary>
        </member>
        <member name="F:Opentelemetry.Proto.Trace.V1.RateLimitingSampler.QpsFieldNumber">
            <summary>Field number for the "qps" field.</summary>
        </member>
        <member name="P:Opentelemetry.Proto.Trace.V1.RateLimitingSampler.Qps">
            <summary>
            Rate per second.
            </summary>
        </member>
    </members>
</doc>
